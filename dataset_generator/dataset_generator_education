import random
import csv
import time
import google.generativeai as genai

# üîê Step 1: Configure Gemini API
genai.configure(api_key="API_KEY")  # Replace with your actual key

# üé¥ Step 2: Data pool
zodiac_signs = [
    "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
    "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"
]

questions = [
    "Am I on the right educational path?",
    "What should I focus on in my studies right now?",
    "Will I succeed in my current academic goals?",
    "How can I stay motivated in my studies?",
    "Should I pursue higher education?",
    "What is blocking my academic progress?",
    "Will I get accepted into my dream school?",
    "How can I overcome distractions while studying?",
    "Is this the right field of study for me?",
    "What does the future hold for my academic journey?",
    "Should I change my major or course of study?",
    "How can I perform better in my exams?",
    "What lesson am I learning through my education?",
    "How can I balance my studies and personal life?",
    "Am I learning what I truly need to succeed?",
    "What energy surrounds my learning process?",
    "How can I make the most of my educational opportunities?",
    "What support do I need for academic success?",
    "Is this academic pressure affecting my mental health?",
    "What is my soul guiding me to study?",
    "Will this course lead to long-term fulfillment?",
    "What skills should I develop through my education?",
    "How can I overcome fear of failure in school?",
    "Am I undervaluing my academic potential?",
    "What does the universe want me to learn right now?",
    "Should I seek mentorship or guidance in my studies?",
    "What hidden talents can I explore through learning?",
    "How can I connect my education to my life purpose?",
    "Is it time to take a break or continue pushing forward?",
    "What role does intuition play in my learning?",
    "How can I stay confident in challenging subjects?",
    "What message do the cards have about my thesis or project?",
    "Am I being too hard on myself academically?",
    "Should I consider studying abroad?",
    "How can I build stronger study habits?",
    "What mindset will help me grow as a student?",
    "Is fear blocking me from achieving academic excellence?",
    "What is the next best step in my education?",
    "How can I overcome burnout in school?",
    "Is this the right time to pursue new learning?",
    "How can I better organize my academic life?",
    "What do I need to unlearn to move forward?",
    "Will my efforts in school lead to success?",
    "What transformation is happening through my education?",
    "What emotional patterns affect my learning process?",
    "How can I approach learning with more curiosity?",
    "Am I ignoring an opportunity to grow intellectually?",
    "What limiting beliefs do I have about being a student?",
    "How can I express my full potential in school?",
    "What does the future hold for my education and growth?"
]

tarot_cards = [
    # Major Arcana (22)
    "The Fool", "The Magician", "The High Priestess", "The Empress", "The Emperor",
    "The Hierophant", "The Lovers", "The Chariot", "Strength", "The Hermit",
    "Wheel of Fortune", "Justice", "The Hanged Man", "Death", "Temperance",
    "The Devil", "The Tower", "The Star", "The Moon", "The Sun",
    "Judgement", "The World",

    # Minor Arcana ‚Äì Wands (14)
    "Ace of Wands", "Two of Wands", "Three of Wands", "Four of Wands", "Five of Wands",
    "Six of Wands", "Seven of Wands", "Eight of Wands", "Nine of Wands", "Ten of Wands",
    "Page of Wands", "Knight of Wands", "Queen of Wands", "King of Wands",

    # Minor Arcana ‚Äì Cups (14)
    "Ace of Cups", "Two of Cups", "Three of Cups", "Four of Cups", "Five of Cups",
    "Six of Cups", "Seven of Cups", "Eight of Cups", "Nine of Cups", "Ten of Cups",
    "Page of Cups", "Knight of Cups", "Queen of Cups", "King of Cups",

    # Minor Arcana ‚Äì Swords (14)
    "Ace of Swords", "Two of Swords", "Three of Swords", "Four of Swords", "Five of Swords",
    "Six of Swords", "Seven of Swords", "Eight of Swords", "Nine of Swords", "Ten of Swords",
    "Page of Swords", "Knight of Swords", "Queen of Swords", "King of Swords",

    # Minor Arcana ‚Äì Pentacles (14)
    "Ace of Pentacles", "Two of Pentacles", "Three of Pentacles", "Four of Pentacles", "Five of Pentacles",
    "Six of Pentacles", "Seven of Pentacles", "Eight of Pentacles", "Nine of Pentacles", "Ten of Pentacles",
    "Page of Pentacles", "Knight of Pentacles", "Queen of Pentacles", "King of Pentacles"
]

# üß† Step 3: Gemini model setup
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# ‚úçÔ∏è Step 4: Prompt generator (casual + compact)
def create_prompt(zodiac, question, cards):
    return f"""
You're a helpful and modern tarot reader. Based on the zodiac sign, question, and three tarot cards, write a short, clear tarot reading.

Zodiac Sign: {zodiac}  
User Question: {question}  
Tarot Cards: {cards[0]}, {cards[1]}, {cards[2]}  

Keep it to 2‚Äì3 simple sentences.  
Each sentence should be under 20 words.  
Use a casual and neutral tone (no mystical or dramatic wording).  
End with a short summary or advice sentence.

Reading:
"""

# üßº Optional: Clean response text
def clean_reading(text):
    text = text.replace("\n", " ").strip()
    if '"' in text:
        text = text.replace('"', "'")
    return text

# üíæ Step 5: Generate and save to CSV
output_file = "tarot_readings_education_final.csv"

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["zodiac", "question", "card1", "card2", "card3", "reading"])

    for i in range(2000):  # Change to 20000 if needed
        zodiac = random.choice(zodiac_signs)
        question = random.choice(questions)
        cards = random.sample(tarot_cards, 3)
        prompt = create_prompt(zodiac, question, cards)

        try:
            response = model.generate_content(prompt)
            reading = clean_reading(response.text)

            if reading and len(reading.split()) <= 60:  # Ensures compact reading
                writer.writerow([zodiac, question, cards[0], cards[1], cards[2], reading])
                print(f"[{i+1}] ‚úÖ {zodiac} | {cards} | {reading[:60]}...")
            else:
                print(f"[{i+1}] ‚ö†Ô∏è Skipped (too long)")
        except Exception as e:
            print(f"[{i+1}] ‚ùå Error: {e}")
            time.sleep(3)

        time.sleep(0.8)

print(f"\n‚úÖ Dataset saved to: {output_file}")
